#lang racket
(require compatibility/mlist)
(require racket/trace)
(define (atom? x) (and (not (null? x)) 
                       (not (pair? x))))

(define (assoc key records)
  (cond ((null? records) #f)
        ((equal? key (mcar (mcar records))) (mcar records))
        (else (assoc key (mcdr records)))))

(define (make-table)
  (let ((local-table (mlist '*table*)))
    (define (lookup key-list)
      (define (recur key-list table)
        (if (null? key-list)
          (mcdr table)
          (let ((subtable (assoc (car key-list) (mcdr table))))
            (if subtable
              (recur (cdr key-list) subtable)
              #f))))
      (recur key-list local-table))
    (define (insert! key-list value)
      (define (recur key-list table)
        (if (null? key-list)
          (set-mcdr! table value)
          (let ((subtable (assoc (car key-list) (mcdr table))))
            (if subtable
              (recur (cdr key-list) subtable)
              (begin (set-mcdr! table (mcons (mlist (car key-list))
                                             (mcdr table)))
                     (recur (cdr key-list) (mcar (mcdr table))))))))
      (recur key-list local-table)
      'ok)
    (define (print)
      (define (display-padding n) (display (make-string (* n 4) #\ )))
      (define (recur table indent-level)
        (if (mlist? table)
          (begin (display (mcar table))
                 (display ":")
                 (display "{\n")
                 (mmap (lambda (x)
                         (display-padding indent-level)
                         (recur x (+ indent-level 1))
                         (display "\n"))
                       (mcdr table))
                 (display-padding (- indent-level 1))
                 (display "} "))
          (begin ;(display-padding indent-level)
                 (display (mcar table))
                 (display ":")
                 (display (mcdr table)))))
      (recur local-table 1))
    (define (dispatch m)
      (cond ((eq? m 'lookup-proc) lookup)
            ((eq? m 'insert-proc!) insert!)
            ((eq? m 'print-proc) print)
            (else (error "Unknown operation -- TABLE" m))))
    dispatch))

(define operation-table (make-table))
(define get (operation-table 'lookup-proc))
(define put (operation-table 'insert-proc!))
(define print-table (operation-table 'print-proc))

(put '(math +) 43)
(put '(math -) 45)
(put '(math *) 42)
(put '(letters a) 97)
(put '(letters b) 98)
(get '(math /))
(get '(math -))
(get '(letters b))
(newline)
(put '(a b c) 1)
(put '(x y z u) 2)
(put '(x y z r) 3)
(get '(x y z r))
(newline)
(put '(A) 99)
(print-table)

