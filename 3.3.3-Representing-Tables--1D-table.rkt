#lang racket
(require compatibility/mlist)
(require racket/trace)

(provide make-table)

(define (assoc key records)
  (cond ((null? records) #f)
        ((equal? key (mcar (mcar records))) (mcar records))
        (else (assoc key (mcdr records)))))

(define (make-table)
  (let ((local-table (mlist '*table*)))
    (define (lookup key)
      (let ((record (assoc key (mcdr local-table))))
        (if record
          (mcdr record)
          #f)))
    (define (insert! key value)
      (let ((record (assoc key (mcdr local-table))))
        (if record
          (set-mcdr! record value)
          (set-mcdr! local-table (mcons (mcons key value)
                                        (mcdr local-table)))))
      'ok)
    (define (print)
      (display "{")
      (mmap (lambda (record)
             (cond ((not (mpair? record)) (display record)
                                          (display " "))
                   (else (display (mcar record))
                         (display ":")
                         (display (mcdr record))
                         (display " "))))
           local-table)
      (display "}\n"))
    (define (dispatch m)
      (cond ((eq? m 'lookup-proc) lookup)
            ((eq? m 'insert-proc!) insert!)
            ((eq? m 'print-proc) print)
            (else (error "Unknown operation -- TABLE" m))))
    dispatch))

(define operation-table (make-table))
(define get (operation-table 'lookup-proc))
(define put (operation-table 'insert-proc!))
(define print-table (operation-table 'print-proc))

(put 'a 1)
(put 'b 2)
(put 'c 3)
(get 'a)
(get 'b)
(get 'c)
(get 'd)
(print-table)
