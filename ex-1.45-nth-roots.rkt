#lang racket
(require racket/trace)
(define (fixed-point f first-guess)
  (define tolerance 0.00001)
  (define (close-enough? v1 v2) (< (abs (- v1 v2)) tolerance))
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
        next
        (try next))))
  (try first-guess))
(define (average-damp f)
  (define (average x y) (/ (+ x y) 2))
  (lambda (x) (average x (f x))))
(define (repeated f n)
  (define (id x) x)
  (define (compose f g)
    (lambda (arg) (f (g arg))))
  (if (= n 0)
    id
    (compose f (repeated f (- n 1)))))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (power t n) (if (= n 0) 1 (* t (power t (- n 1)))))
(define (seed-func x n)
  (lambda (y) (/ x (power y (- n 1)))))


(define x 2)
(display "2^(1/2)^2: ") (power (fixed-point ((repeated average-damp 1 ) (seed-func x 2))  1.0) 2)
(display "2^(1/3)^3: ") (power (fixed-point ((repeated average-damp 1 ) (seed-func x 3))  1.0) 3)
(display "\n")
(display "2^(1/4)^4: ") (power (fixed-point ((repeated average-damp 2 ) (seed-func x 4))  1.0) 4)
(display "2^(1/5)^5: ") (power (fixed-point ((repeated average-damp 2 ) (seed-func x 5))  1.0) 5)
(display "2^(1/6)^6: ") (power (fixed-point ((repeated average-damp 2 ) (seed-func x 6))  1.0) 6)
(display "2^(1/7)^7: ") (power (fixed-point ((repeated average-damp 2 ) (seed-func x 7))  1.0) 7)
(display "\n")
(display "2^(1/8)^8: ") (power (fixed-point ((repeated average-damp 3 ) (seed-func x 8))  1.0) 8)
(display "2^(1/9)^9: ") (power (fixed-point ((repeated average-damp 3 ) (seed-func x 9))  1.0) 9)
(display "\n")
(display "For nth roots, we need to repeat the average-damp in log(n) times!\n")
