#lang racket
(require compatibility/mlist)

(define (assoc key records)
  (cond ((null? records) #f)
        ((equal? key (mcar (mcar records))) (mcar records))
        (else (assoc key (mcdr records)))))

(define (make-table)
  (let ((local-table (mlist '*table*)))
    (define (lookup key-1 key-2)
      (let ((subtable (assoc key-1 (mcdr local-table))))
        (if subtable
          (let ((record (assoc key-2 (mcdr subtable))))
            (if record
              (mcdr record)
              #f))
          #f)))
    (define (insert! key-1 key-2 value)
      (let ((subtable (assoc key-1 (mcdr local-table))))
        (if subtable
          (let ((record (assoc key-2 (mcdr subtable))))
            (if record
              (set-mcdr! record value)
              (set-mcdr! subtable (mcons (mcons key-2 value)
                                         (mcdr subtable)))))
          (set-mcdr! local-table (mcons (mlist key-1 (mcons key-2 value))
                                        (mcdr local-table)))))
      'ok)
    (define (print)
      (display "{")
      (mmap (lambda (record)
              (cond ((not (mpair? record)) (display record)
                                           (display " "))
                   (else (mmap (lambda (subrecord)
                                 (cond ((not (mpair? subrecord)) (display subrecord)
                                                                 (display " "))
                                       (else (display (mcar subrecord))
                                             (display ":")
                                             (display (mcdr subrecord))
                                             (display " "))))
                               record)
                         (display "\n")
                         )))
            local-table)
      (display "}\n"))
    (define (dispatch m)
      (cond ((eq? m 'lookup-proc) lookup)
            ((eq? m 'insert-proc!) insert!)
            ((eq? m 'print-proc) print)
            (else (error "Unknown operation -- TABLE" m))))
    dispatch))

(define operation-table (make-table))
(define get (operation-table 'lookup-proc))
(define put (operation-table 'insert-proc!))
(define print-table (operation-table 'print-proc))

(put 'math '+ 43)
(put 'math '- 45)
(put 'math '* 42)
(put 'letters 'a 97)
(put 'letters 'b 98)
(get 'math '/)
(get 'math '-)
(print-table)
