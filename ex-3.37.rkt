#lang racket
(require "3.3.5-Propagation-of-Constraints--Representing-connectors.rkt")
(require "3.3.5-Propagation-of-Constraints--Implementing-the-constraint-system.rkt")



(define (c+ x y)
  (let ([z (make-connector)])
    (adder x y z)
    z))
(define (c- x y)
  (let ([z (make-connector)])
    (adder z y x)
    z))
(define (c* x y)
  (let ([z (make-connector)])
    (multiplier x y z)
    z))
(define (c/ x y)
  (let ([z (make-connector)])
    (multiplier z y x)
    z))
(define (cv value)
  (let ([z (make-connector)])
    (constant value z)
    z))

(define (celsius-fahrenheit-converter x)
  (c+ (c* (c/ (cv 9) (cv 5))
          x)
      (cv 32)))


(define C (make-connector))
(define F (celsius-fahrenheit-converter C))
(probe "Celsius temp" C)
(probe "Fahrenheit temp" F)
(set-value! C 25 'user)     (newline)
(forget-value! C 'user)     (newline)
(set-value! F 212 'user)    (newline)
