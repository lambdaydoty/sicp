#lang racket
(require "2.4.3-module-put-get.rkt")
(require "2.4.3-module-tags.rkt")
(provide install-rational-package)

(define (install-rational-package)
  ;;internal procedures
  (define (make-rat n d)  (let ((g (gcd n d))) (cons (/ n g) (/ d g))))
  (define (numer z)       (car z))
  (define (denom z)       (cdr z))
  (define (add-rat x y)   (make-rat (+ (* (numer x) (denom y))
                                       (* (numer y) (denom x)))
                                    (* (denom x) (denom y))))
  (define (sub-rat x y)   (make-rat (- (* (numer x) (denom y)
                                          (numer y) (denom x)))
                                    (* (denom x) (denom y))))
  (define (mul-rat x y)   (make-rat (* (numer x) (numer y))
                                    (* (denom x) (denom y))))
  (define (div-rat x y)   (make-rat (* (numer x) (denom y))
                                    (* (denom x) (numer y))))
  ;(define (equal-rat? x y) (= (* (numer x) (denom y))
  ;                            (* (numer y) (denom x))))
  ;;interface to rest of the system (new)
  (define (tag x) (attach-tag 'rational x))
  (put 'add '(rational rational) (lambda (x y) (tag (add-rat x y))))
  (put 'sub '(rational rational) (lambda (x y) (tag (sub-rat x y))))
  (put 'mul '(rational rational) (lambda (x y) (tag (mul-rat x y))))
  (put 'div '(rational rational) (lambda (x y) (tag (div-rat x y))))
  (put 'make 'rational (lambda (n d) (tag (make-rat n d))))
  'done)
